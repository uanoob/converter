{"version":3,"sources":["widgets/TempView.js","utils/temp.utils.js","widgets/TempContainer.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","root","maxWidth","margin","marginTop","spacing","unit","paddingTop","paddingBottom","textAlign","container","display","flexDirection","flexWrap","textField","marginLeft","marginRight","props","classes","celsius","fahrenheit","kelvin","handleChange","react_default","a","createElement","Paper_default","className","elevation","Typography_default","variant","component","color","noValidate","autoComplete","TextField_default","id","label","name","value","onChange","getTemp","num","parseFloat","Number","isNaN","Math","round","toString","TempContainer","state","e","_e$target","target","_this","setState","Object","defineProperty","calculateTemp","data","objectSpread","_this2","this","TempView","assign","Component","App","widgets_TempContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edbc4fea.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = theme => ({\n  root: {\n    maxWidth: 300,\n    margin: 'auto',\n    marginTop: theme.spacing.unit,\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    textAlign: 'center',\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n});\n\nconst tempView = (props) => {\n  const {\n    classes, celsius, fahrenheit, kelvin, handleChange,\n  } = props;\n  return (\n    <Paper className={classes.root} elevation={1}>\n      <Typography variant=\"h6\" component=\"h3\" color=\"primary\">\n        Temperature converter.\n      </Typography>\n      <form className={classes.container} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"outlined-celsius\"\n          label=\"Celsius\"\n          className={classes.textField}\n          name=\"celsius\"\n          value={celsius}\n          onChange={handleChange}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n        <TextField\n          id=\"outlined-fahrenheit\"\n          label=\"Fahrenheit\"\n          className={classes.textField}\n          name=\"fahrenheit\"\n          value={fahrenheit}\n          onChange={handleChange}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n        <TextField\n          id=\"outlined-kelvin\"\n          label=\"Kelvin\"\n          className={classes.textField}\n          name=\"kelvin\"\n          value={kelvin}\n          onChange={handleChange}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </form>\n    </Paper>\n  );\n};\n\ntempView.propTypes = {\n  classes: PropTypes.shape({\n    container: PropTypes.string.isRequired,\n    textField: PropTypes.string.isRequired,\n  }).isRequired,\n  celsius: PropTypes.string.isRequired,\n  fahrenheit: PropTypes.string.isRequired,\n  kelvin: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(tempView);\n","const getTemp = (name, value) => {\n  const num = parseFloat(value);\n  if (Number.isNaN(num)) {\n    return '';\n  }\n  if (name === 'celsius') {\n    const fahrenheit = Math.round((num * 9) / 5 + 32);\n    const kelvin = Math.round(num + 273.15);\n    return {\n      fahrenheit: fahrenheit.toString(),\n      kelvin: kelvin.toString(),\n    };\n  }\n  if (name === 'fahrenheit') {\n    const celsius = Math.round(((num - 32) * 5) / 9);\n    const kelvin = Math.round(((num - 32) * 5) / 9 + 273.15);\n    return {\n      celsius: celsius.toString(),\n      kelvin: kelvin.toString(),\n    };\n  }\n  if (name === 'kelvin') {\n    const celsius = Math.round(num - 273.15);\n    const fahrenheit = Math.round(((num - 273.15) * 9) / 5 + 32);\n    return {\n      celsius: celsius.toString(),\n      fahrenheit: fahrenheit.toString(),\n    };\n  }\n  return null;\n};\n\nexport default getTemp;\n","import React, { Component } from 'react';\nimport TempView from './TempView';\nimport getTemp from '../utils/temp.utils';\n\nclass TempContainer extends Component {\n  state = {\n    celsius: '',\n    fahrenheit: '',\n    kelvin: '',\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n    this.calculateTemp(name, value);\n  };\n\n  calculateTemp = (name, value) => {\n    if (!value) {\n      this.setState({\n        celsius: '',\n        fahrenheit: '',\n        kelvin: '',\n      });\n    } else {\n      const data = getTemp(name, value);\n      this.setState({ ...data });\n    }\n  };\n\n  render() {\n    return <TempView handleChange={e => this.handleChange(e)} {...this.state} />;\n  }\n}\n\nexport default TempContainer;\n","import React from 'react';\nimport TempContainer from './widgets/TempContainer';\n\nconst App = () => <TempContainer />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}